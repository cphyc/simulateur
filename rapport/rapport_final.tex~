\documentclass[a4paper]{article}

\usepackage[french]{babel}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{fullpage}
\usepackage{pgf}
\usepackage{tikz}
\usetikzlibrary{arrows,automata}
\usetikzlibrary{positioning,calc}

\tikzstyle{operateur} =
[style={circle,fill=gray!20,draw,font=\sffamily\large\bfseries}]
\tikzstyle{not} = [draw,style={circle,fill=gray!20},minimum size=0.0cm]
\tikzstyle{reg} = [style={fill=gray!20,draw,thick,minimum size=0.8cm}]
\tikzstyle{boite} = [minimum height=2cm, minimum width=2cm,rectangle,
					style={fill=gray!20,draw,thick}]
\tikzstyle{rambox} = [minimum height=7cm, minimum width=2cm,rectangle,
					style={fill=gray!20,draw,thick}]
\tikzstyle{muxv} = [minimum height=1.6cm, minimum width=0.5cm,rectangle,
	               style={fill=gray!20,draw,thick}]
\tikzstyle{mux} = [minimum height=0.5cm, minimum width=1.6cm,rectangle,
	               style={fill=gray!20,draw,thick}]
\tikzstyle{muxb} = [node distance=0.4cm,style={minimum size=0.5cm}]
\tikzstyle{vide} = []
\tikzstyle{noeud} = [style={circle,fill=black,minimum size=0cm}]
\tikzstyle{fil} = [->,style={thick}]
\tikzstyle{filb} = [style={thick}]
\tikzstyle{ecrit} = [font=\sffamily\small\bfseries]
\tikzstyle{exterieur} = [dashed, draw]
\tikzstyle{hypot} = [dashed]

\begin{document}

\title{Microprocessor design}
\author{Baptiste Lefebvre, Li-yao Xia, Antonin Delpeuch}
\date{18 Janvier 2013}

\maketitle

\section{Motivation}

We wanted to design an original microprocessor. The requirements were :
\begin{itemize}
\item To be able to run a digital watch ;
\item To use an uncommon architecture,
  contrasting with the MIPS standard as we
  already discovered it in the compilation course ;
\item To be able to run arbitrary programs.
\end{itemize}

Reduced Instruction Set Chips (such as ARM) are widely used,
but their instruction set is not really small. A natural question arises :
to what extent can we reduce this set ? 

\section{Instruction set}

We discovered the Subleq instruction set, which is made of only one
instruction, called \texttt{subleq}. Here is the behaviour of
\texttt{subleq a b c} :

\begin{verbatim}
  b := b - a;
  if b > 0 then
    go to the next instruction
  else go to c
\end{verbatim}

With this only instruction, one can compute the usual operations
and the chip remains therefore able to run arbitrary programs
(as long as it has access to enough memory).

As the chip always handle signed values, we decided that writing
(respectively reading) from a negative address sets
(respectively returns) the value of the given output
(which is a value displayed on 7 segment modules).

An instruction invariably takes 5 clock ticks to be executed, because we
use one single addressed RAM.
Less clock ticks could be used through the use of parallel addressing,
which could be implemented but wasn't because we deemed it too artificial
with the basic blocks provided to us.
It was also an opportunity to "schedule" the execution of an instruction
over several time steps. 

We also chose to implement the conversion from binary values
to 7-segment codes in the circuit. 

\section{Logic circuit simulator}

For this project we had to write a simulator.
Advanced optimizations were not required of us,
but we implemented an optimizing simulator, which looks for
"common sub-expressions" and partially evaluates constant values.

\section{Development tools}

We implemented an assembler and an assembly language interpreter
which defines the behaviour we expect from our circuit.

\section{Watch}

We wrote the program of our watch in the subleq assembly language.
The program implements the Gregorian calendar including leap years
(every four years except every 100 years except every 400 years)

\begin{figure}
   \centering
    \begin{tikzpicture}[auto, node distance=1cm,>=latex']
 
    \node[not] at (4cm,4cm) (n1) {};
    \node[reg, node distance=0.2cm, right=of n1] (r1) {st1};
    \node[not, node distance=0.2cm, right=of r1] (n2) {};
    \node[reg, right=of r1] (r2) {st2};
    \node[reg, right=of r2] (r3) {st3};
    \node[reg, right=of r3] (r4) {st4};
    \node[reg, right=of r4] (r5) {st5};

    \node[above right of= r5] (ctrl1) {};
    \node[above left of= n1] (ctrl2) {};
    \draw[fil] (n1) -- (r1);
    \draw[fil] (r1) -- (n2);
    \draw[fil] (n2) -- (r2);
    \draw[fil] (r2) -- (r3);
    \draw[fil] (r3) -- (r4);
    \draw[fil] (r4) -- (r5);
    \draw[filb] (r5) -| (ctrl1.mid);
    \draw[filb] (ctrl1.mid) -- (ctrl2.mid);
    \draw[fil] (ctrl2.mid) |- (n1);

	\node[reg] at ($(0,-5)+3*(0.5+0,0)$) (rn0)  {A};
	\node[mux, below of=rn0, node distance=1.5cm] (mn0)
         {0\hspace{0.6cm}1};
	\node[below left of=mn0, node distance=1cm] (ctrlrop0) {};
	\node[below right of=mn0, node distance=1.5cm] (ctrlroq0) {};
	\node[above left of=rn0, node distance=1.5cm] (ctrlal0) {};
	\draw[fil] (mn0) -- (rn0);
	\draw[fil] (ctrlrop0.mid) -|  ($(mn0)+(-0.4cm,-0.25cm)$);
	\draw[filb] (ctrlrop0.mid) -| (ctrlal0.mid);
	\draw[filb] (ctrlal0.mid) -| (rn0);
	\draw[fil] (ctrlroq0.mid) -| ($(mn0)+(0.4cm,-0.25cm)$); 


   	\node[reg] at ($(0,-5)+3*(0.5+1,0)$) (rn1)  {B};
	\node[mux, below of=rn1, node distance=1.5cm] (mn1)
         {0\hspace{0.6cm}1};
	\node[below left of=mn1, node distance=1cm] (ctrlrop1) {};
	\node[below right of=mn1, node distance=1.5cm] (ctrlroq1) {};
	\node[above left of=rn1, node distance=1.5cm] (ctrlal1) {};
	\draw[fil] (mn1) -- (rn1);
	\draw[fil] (ctrlrop1.mid) -|  ($(mn1)+(-0.4cm,-0.25cm)$);
	\draw[filb] (ctrlrop1.mid) -| (ctrlal1.mid);
	\draw[filb] (ctrlal1.mid) -| (rn1);
	\draw[fil] (ctrlroq1.mid) -| ($(mn1)+(0.4cm,-0.25cm)$); 


	\node[reg] at ($(0,-5)+3*(0.5+2,0)$) (rn2)  {VB};
	\node[mux, below of=rn2, node distance=1.5cm] (mn2)
         {0\hspace{0.6cm}1};
	\node[below left of=mn2, node distance=1cm] (ctrlrop2) {};
	\node[below right of=mn2, node distance=1.5cm] (ctrlroq2) {};
	\node[above left of=rn2, node distance=1.5cm] (ctrlal2) {};
	\draw[fil] (mn2) -- (rn2);
	\draw[fil] (ctrlrop2.mid) -|  ($(mn2)+(-0.4cm,-0.25cm)$);
	\draw[filb] (ctrlrop2.mid) -| (ctrlal2.mid);
	\draw[filb] (ctrlal2.mid) -| (rn2);
	\draw[fil] (ctrlroq2.mid) -| ($(mn2)+(0.4cm,-0.25cm)$); 

    \node at ($(ctrlroq2)+(4cm,0)$) (ctrlrr) {};
    \draw[filb] (ctrlroq2.mid) -- (ctrlrr.mid);
    \draw[filb] (ctrlroq0.mid) -- (ctrlroq1.mid) -- (ctrlroq2.mid);

    \node[rambox] at ($(ctrlrr)+(-2cm,7cm)$) (rammod) {Memory}; 
    \draw[filb] (ctrlrr.mid) |- (rammod);

    \node[reg] at (2,0) (pcreg) {pc};
    \node[muxv] at
($(pcreg)-(1.5cm,0.4cm)$) (pcmuxi) {};
    \node[muxv, node distance=3cm, left of=pcreg] (pcmux) {};
    \node at ($(pcmux)+(0,0.4cm)$) (pcmux0) {0};
    \node at ($(pcmux)+(0,-0.4cm)$) (pcmux1) {1};
    \node at ($(pcmuxi)+(0,0.4cm)$) (pcmuxi0) {0};
    \node at ($(pcmuxi)+(0,-0.4cm)$) (pcmuxi1) {1};
    \node at ($(pcmuxi)+(-0.5cm,-0.4cm)$) {c};
    \node[node distance=1.5cm, above right of=pcreg] (pcrct) {};
    \node[node distance=1.3cm, above left of=pcmux] (pcl1ct) {};
    \node[node distance=1.7cm, above left of=pcmux] (pcl2ct) {};
    \node[operateur, node distance=2cm, above of=pcreg] (incr1) {+1};
    \draw[fil] (pcmux) -- ($(pcmuxi)+(-0.25,0.4cm)$);
    \draw[filb] (pcreg) -| (pcrct.mid) -| (pcl1ct.mid);
    \draw[fil] (pcl1ct.mid) |- ($(pcmux)+(-0.25cm,0.4cm)$);
    \draw[fil] (pcrct.mid) |- (incr1);
    \draw[fil] (incr1) -| (pcl2ct.mid) |- ($(pcmux)+(-0.25cm,-0.4cm)$);
    
    \node[operateur, node distance=1.5cm, below of=pcmux] (pcunion) {U};
    \draw[filb] ($(pcunion)+(-0.5cm,-0.5cm)$) -- (pcunion) ++(-0.6cm,-0.7cm)
node {st1};
    \draw[filb] ($(pcunion)+(0cm,-0.5cm)$) -- (pcunion) ++(0,-0.7cm)
node {st2};
    \draw[filb] ($(pcunion)+(0.5cm,-0.5cm)$) -- (pcunion) ++(0.6cm,-0.7cm)
node {st5};
    \draw[fil] ($(pcunion)+(0.5cm,-0.5cm)$) -- (pcunion);
    \draw[fil] ($(pcunion)+(0cm,-0.5cm)$) -- (pcunion);
    \draw[fil] ($(pcunion)+(-0.5cm,-0.5cm)$) -- (pcunion);
    \draw[fil] (pcunion) -- (pcmux);
    \draw[fil] ($(pcmuxi)+(0.25cm,0.4cm)$) -- (pcreg);

    \node[boite] at ($(rammod)+(-3.5cm,2cm)$) (muxers) {Muxers};
    \draw[fil] ($(muxers)+(1cm,0.6cm)$) -- ($(rammod)+(-1cm,2.6cm)$);
    \draw[filb] ($(muxers)+(1cm,0.6cm)$) -- ($(rammod)+(-1cm,2.6cm)$)
         ++(-0.9cm,0.15cm) node {wa};
    \draw[fil] ($(muxers)+(1cm,0.2cm)$) -- ($(rammod)+(-1cm,2.2cm)$);
    \draw[filb] ($(muxers)+(1cm,0.2cm)$) -- ($(rammod)+(-1cm,2.2cm)$)
         ++(-0.9cm,0.15cm) node {ra};
    \draw[fil] ($(muxers)+(1cm,-0.2cm)$) -- ($(rammod)+(-1cm,1.8cm)$);
    \draw[filb] ($(muxers)+(1cm,-0.2cm)$) -- ($(rammod)+(-1cm,1.8cm)$)
         ++(-0.9cm,0.15cm) node {wen};
    \draw[fil] ($(muxers)+(1cm,-0.6cm)$) -- ($(rammod)+(-1cm,1.4cm)$);
    \draw[filb] ($(muxers)+(1cm,-0.6cm)$) -- ($(rammod)+(-1cm,1.4cm)$)
         ++(-0.9cm,0.15cm) node {data};

    \draw[fil] (rn0) |- ++(4cm,3cm) |- ($(muxers)+(-1cm,0.7cm)$);
    \draw[fil] (rn1) |- ++(1.2cm,2.8cm) |- ($(muxers)+(-1cm,0.5cm)$);
    \draw[fil] (rn2) |- ++(-1.6cm,2.6cm) |- ($(muxers)+(-1cm,0.3cm)$);
    \draw[fil] (pcreg) -| ++(2cm,2cm) |- ($(muxers)+(-1cm,0.9cm)$);

    \node[operateur] at (-1cm,-5.2cm) (sub) {sub};
    \node[operateur] at (-1cm,-3.4cm) (neg) {neg};
    \draw[fil] (ctrlrr.mid) -| (sub);
    \draw[fil] (sub) -- (neg);
    \draw[fil] (ctrlrop0.mid) -| ($(sub)+(0.35,-0.35)$);
    \draw[fil] (neg) -| (pcmuxi);

    \end{tikzpicture}
    \caption{Chip's architecture}
\end{figure}


\end{document}

